pipeline {
    agent any

    environment {
        // Define environment variables for AWS ECR
        AWS_DEFAULT_REGION = 'your-aws-region'
        AWS_ACCOUNT_ID = 'your-aws-account-id'
        ECR_REPO_NAME = 'your-ecr-repo-name'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_IMAGE = "your-docker-image-name:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Build your Java application using Maven or Gradle
                    sh 'mvn clean package'
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in your project
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    // Authenticate with AWS ECR
                    withCredentials([string(credentialsId: 'your-aws-credential-id', variable: 'AWS_CREDENTIAL')]) {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    }

                    // Tag the Docker image for ECR
                    sh "docker tag ${DOCKER_IMAGE} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}"

                    // Push the Docker image to ECR
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            // Clean up - remove the Docker image locally
            sh "docker rmi ${DOCKER_IMAGE}"
        }
    }
}
