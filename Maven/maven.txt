https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html - maven lifecycles
All the build outcomes stored under target directory

what is build tool
we write some code and we wanna deploy onto tomcat
can deploy the code directly - the answer is no
before deploy onto tomcat it should be genarated in war(webapp), jar(java-app), ear(enterprise-app)
if we wanna create jar, war and ear build tool is required
There are three build tools like maven, gradle and ANT

maven compile the source code then package the results into jar, war and ear, then upload the package to remote repos(nexus and jfrog)
Majorly maven is used for java based apps

installation procedure for maven on linux
sudo yum install java-1.8.0-openjdk-devel -y
java -version
copy the zip file https://dlcdn.apache.org/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.zip from https://maven.apache.org/download.cgi website
cd /opt/ then wget https://dlcdn.apache.org/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.zip
then unzip apache-maven-3.9.3-bin.zip
mv apache-maven-3.9.3 maven - it's sort renaming or moving stuff
if we wanna configure any tool auth this path /opt/maven/conf has settings.xml
/opt/maven/bin, /opt/maven/conf - important directories in maven

set the Environment variables for maven - if we set the environment variables we can run the maven command from any path entire server
to set this we should move onto - /etc/profile.d then create maven.sh
then paste this stuff
export M2_HOME=/opt/maven - installation path of maven
export PATH=${M2_HOME}/bin:${PATH} onto maven.sh - here the bin helps the maven command to run
chmod 777 maven.sh
we need to load the maven.sh on system-level for that use the command - source maven.sh then check the version using mvn --version
maven depends only on one file - pom.xml(it has the dependencies and configuration, plugins and goals)
maven reads the pom.xml file and executes the goals
mandatory fields in pom.xml (project tag, modelversion, groupid, artifactid, version)
get the info for settings.xml - can be found /opt/maven/conf - has settings.xml file (which has the info servers, profiles etc)
what is maven repository?
it is directory of packaged JAR file with pom.xml file, maven searches for dependencies and repositories
maven has three repos - local(our pc), central-repo(internet-maven-repo) and remote-repo(jfrog, nexues), the maven also checks in the same flow (from local - remote)
if dependencies not found in the above mentioned repos, maven stops processing and throws an error
===========================
creation of java app using maven(it has seven stops involved)

Step 1: mvn archetype:generate - it generates all dependencies from central-repo, only first command is enough to enter, cli walksthough us - can be run from the root (mavenarchetype-quickstart)
Step 2: Then ask select the project type jar - if we wanna generate the jar file just press the enter, no need of selecting stuff explicitly
Step 3 : Select the Version then Enter example 1.0 
Step 4 : Enter the Groupid , here give the company name com.devopsbymurali
Step 5:Enter the artifactId , here give the project name  Ex: Java-Project
Step 6 : Enter the package , package name same as group Id
Step 7:Asking Version(Snapshot means Current working or Under development)  -just press enter, then enter Y explicitly    

After performing the above steps folder is created (it has pom.xml file and src and src)
if we wanna navigate into src, we do it using cd right, but also we view the hierarchy using tree .(dot represents the current directory)
Till here we just created the project, then we wanna generate the war and jar file
Maven build lifecycle - Basically it's used for build the code in a format, compiling, running test cases, wanna generate the jar and war
these all commands should run under the javaproject that we created above
these all steps should run from Java-project folder

mvn validate - validates the project is correct and all necessary information is available
mvn compile - compile the source code of the project, converts .java file to .class file and creates the target directory
mvn test  - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed, converts apptest.java to apptest.class (also generates surefire-reports)
mvn package - take the compiled code and package it in its distributable format, such as a JAR, generates the jar file - and lands it in the target directory
mvn verify - run any checks on results of integration tests to ensure quality criteria are met, verifies the genarated jar file whether it's correct or not (and no-extra stuff gets added)
mvn install - install the package into the local repository, for use as a dependency in other projects locally, it helps stroing the jar and pom in the m2 directory in the root directory (/root/.m2/repository/com/sudhamsh1996/Java-Project/1.0-SNAPSHOT), but it won't vanishes the stuff from java-project
mvn deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects, genarated jar/war file should be stored onto remote-repo(nexus, jfrog - artifactory tool), if we wanna do so, need to add the disrtibution management tag in pom.xml file, then add the authentication info nexus/jfrog in settings.xml(add auth info inside the servers tag) present in the /opt/maven/conf 


mvn clean - helps the cleaning the stuff like target directory and it's Snapshot - but don't worry, a copy of data is stored in m2 directory under root
==================================================
creation of webapplication using maven - generating the war file
follow the same seven steps which are mentioned above
mvn archetype:generate (a number should be entered explicitly for webapps (mavenarchetype-webapp)(select the number from console))
same as above stuff, but only difference is, it generates the war file

pom.xml options - https://maven.apache.org/pom.html

============================
skip the test cases - https://maven.apache.org/surefire/maven-surefire-plugin/examples/skipping-tests.html
we can include in the pom.xml in the plugin tag and there are couple of commands using the cli(mvn install -DskipTests or mvn install -Dmaven.test.skip=true)
this should be run within the project alike the javaproject, webapplication

jacoco plugin - https://www.eclemma.org/jacoco/trunk/doc/maven.html - it's used to generate the report for sonarqude



==========================================================

installation of maven on jenkins
setup maven on jenkins server
setup the environment variables
JAVA_HOME(for java), M2, M2_HOME(for maven)
install the maven plugin
configure the maven and Java
