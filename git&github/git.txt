git workflow - working directory(git add)>staging area/index area(git commit)>local(git push)then remote

generating ssh key on linux and adding onto github
ssh-keygen -t ed25519 -C "sudhamsh1996@gmail.com"
cat ~/.ssh/id_ed25519.pub - it spits the id puton github


Feautre branching strategy 
in here first we have a main branch, from main branch we create a development branch, from development we creata a multiple feautre branches, based on modules we create the feautre branch, based on the application size we create the feature branches,
once feature branch completes, it's merged back to the development branch, from development branch we deploy on to the lower environments(dev, qa, uat), then we merge the development branch to the mmaster, then master branch is deployed onto production.
in case if we get any issue in production, we create a hotfix-branch ontop of main branch and can be referenced onto the other resource-type



working directory > staging area > local repo > remote repo
git log --oneline - shows the commit-id concise
git add .
git status
git commit -m "commit message"

git branch - displays the the current branch with asterisk
git branch <branch-name> - creates the branch
git checkout <branch-name> - helps switching the branch
git checkout -b <branch-name> - helps create the branch as well as switches the branch
git branch -d <branch-name> - deletes the branch

when we create a branch from existing branch we get a copy of that branch, when we add something onto branch, should be added and then committed to local-repo, if we don't add and commit it gets reflected on all branches
git remote -v - desplays the repo on which we're working
git remote set-url origin <github-url>  - helps add the desired repo onto our local

git clone <github-url-https> -b <branch-name> if we wanna clone the specific branch

git pull - pulls the code from github as well as the commit history - syncs the remote-repo with local-repo(pulls all the changes into working directory)

git fetch  - it creates a branch with latest commit-id, although we don't see the changes unless we checkout to the latest commit
git checkout <latest-commit-id> - this should merge the stuff on our local
git pull origin <branch-name>

s3://personnel-bucket-of-sudhamsh/DevOps-and-Cloud-Resume-of-Sudhamsh.pdf
https://personnel-bucket-of-sudhamsh.s3.us-west-2.amazonaws.com/DevOps-and-Cloud-Resume-of-Sudhamsh.pdf
git merge(shows proper history, what was inserted, removed), git rebase(just shows the success message) both are same 


In Git, the git reset command is used to manipulate the commit history and the staging area by moving the HEAD and branch pointers to a specified commit. It's a powerful command with several options, and its primary purpose is to undo or adjust previous commits and their associated changes. Here are some common use cases for git reset(soft, mixed and hard)
# Soft reset to undo the last commit but keep changes staged for a new commit
git reset --soft HEAD~1

# Mixed reset (default) to unstage changes but keep them in the working directory
git reset HEAD

# Hard reset to completely discard changes and reset to a specific commit
git reset --hard <commit_hash>
git reset --soft commitid - it moves specific commitid files to staging area
git reset --mixed commitid/git reset commitid  - the specific commitid files to working directory
git reset --hard commitid - it deletes the previous commit-ids(ofcourse it has all files) - not recommended

git revert - type of undo operation(git revert commitid)
In summary, git revert is a useful command for safely undoing changes in Git repositories without altering the commit history.

.gitignore (vi .gitignore(include the file extensions that needs to excluded while pushing onto github))

git diff  - shows the content of a file whether it's added or deleted in working directory and staging area
git diff --staged/git diff --staged HEAD - compares staging area files with local vcs
git diff HEAD - compares the files in working directory and local vcs
git diff HEAD <desired-commitid>

git show <commitid>
git annotate <filename>  - shows the history, who has done the changes in a specific file, in the UI we can go to the desired file and click on the blame

git checkout <commitid>  - helps switch to the specific commit-id

git switch - > helps movin to the latest commit

Merge conflict - when a two developers modifies the same line of code in same file

Fork  - arrives onto our github account from another github account

git branching strategy
Feature branching - Main>Development(branch)>Feature-1(branch)>adding the modules onto feature-1>then PR from feature-1 to Development>then deploying the stuff of Development to lower environments(dev, pre-prod), if everything goes well then >raisea a PR from Development to main for deploying onto production> then if a bug happens onto production> create a hot-fix branch> then raise a PR from hotfix to main 
Release branching - main-release.2023.08.1(year, month, relaease-number)adding the code onto release.2023.08.1 and deploying onto dev, qa and uat then onto prod> PR from release.2023.08.1 to main, if a bug(issue with the code) gets triggerred onto prod we a create a hotfix.release.2023.08.1 then points to the prod or else raise a PR from hotfix.release.2023.08.1 to main



git tags - git tags are references that point to specific commit in git history, tagging is generally used to capture a point in history that is used for marked version release(v.1.0.1)

git tag v1.0 - this get associated with latest commit > then git push origin tag v1.0

git tag -a v2.0 6138a5a -m "added the tag to a commit" > git push origin tag v2.0

git restore <filename> / git checkout <filename> restores the file to it's original state - revert changes from working directory

git restore --staged <filename> revert changes from staging area to working directory

git reset HEAD~1(desired commit) - revert changes from local repo to working directory

git rebase - squashes multiple commits to a single commit

At any given point we can go back to the previous version

this is a test message

git tag
git tag -a v1.0 -m 'first release'

git show v1.0